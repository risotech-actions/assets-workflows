name: Release new Assets Package

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version'
        default: '18'
        required: false
        type: string
    secrets:
      personal_access_token:
        required: true

env:
  REGISTRY: 'https://npm.pkg.github.com'

jobs:
  validate-merge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    outputs:
      is_valid_branch: ${{ steps.check.outputs.is_valid_branch }}
      parent_branch: ${{ steps.check.outputs.parent_branch }}
      feature_branch: ${{ steps.check.outputs.feature_branch }}
      skip_message: ${{ steps.check.outputs.skip_message }}
    steps:
      - name: Check branch pattern
        id: check
        run: |
          BRANCH="${{ github.head_ref }}"
          TARGET="${{ github.base_ref }}"
          
          if [[ "$BRANCH" =~ ^([^/]+)-features/([^/]+)$ ]]; then
            PARENT="${BASH_REMATCH[1]}"
            FEATURE="${BASH_REMATCH[2]}"
            
            if [ "$TARGET" == "$PARENT" ]; then
              echo "is_valid_branch=true" >> $GITHUB_OUTPUT
              echo "parent_branch=$PARENT" >> $GITHUB_OUTPUT
              echo "feature_branch=$FEATURE" >> $GITHUB_OUTPUT
              echo "skip_message=" >> $GITHUB_OUTPUT
            else
              echo "is_valid_branch=false" >> $GITHUB_OUTPUT
              echo "skip_message=⏭️ Skipped: PR was not merged into its parent branch. Expected: $PARENT, Got: $TARGET" >> $GITHUB_OUTPUT
            fi
          else
            echo "is_valid_branch=false" >> $GITHUB_OUTPUT
            echo "skip_message=⏭️ Skipped: Merged branch does not follow pattern: parent-features/name. Got: $BRANCH" >> $GITHUB_OUTPUT
          fi

      - name: Output Validation Results
        run: |
          if [ "${{ steps.check.outputs.is_valid_branch }}" == "true" ]; then
            echo "## ✅ Merge Validation Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Merge Details" >> $GITHUB_STEP_SUMMARY
            echo "- Feature Branch: \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Parent Branch: \`${{ steps.check.outputs.parent_branch }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Feature Name: \`${{ steps.check.outputs.feature_branch }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⏭️ Version Update Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Skip Details" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.check.outputs.skip_message }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Branch Information" >> $GITHUB_STEP_SUMMARY
            echo "- Merged Branch: \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Target Branch: \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### PR Guidelines" >> $GITHUB_STEP_SUMMARY
            echo "1. Feature branches must:" >> $GITHUB_STEP_SUMMARY
            echo "   - Follow pattern: \`parent-features/name\`" >> $GITHUB_STEP_SUMMARY
            echo "   - Be merged into their parent branch" >> $GITHUB_STEP_SUMMARY
          fi

  cleanup-beta:
    needs: validate-merge
    if: needs.validate-merge.outputs.is_valid_branch == 'true'
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Delete Beta Packages
        id: cleanup
        env:
          GH_TOKEN: ${{ secrets.personal_access_token }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PACKAGE_NAME="@${{ github.repository_owner }}/${{ needs.validate-merge.outputs.parent_branch }}"
          
          # Get all versions of the package
          VERSIONS=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "/user/packages/npm/${PACKAGE_NAME}/versions" --jq ".[].name")
          
          # Find and delete beta versions for this PR
          for VERSION in $VERSIONS; do
            if [[ $VERSION =~ .*-beta\.$PR_NUMBER\..* ]]; then
              echo "Deleting beta version: $VERSION"
              gh api \
                --method DELETE \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/user/packages/npm/${PACKAGE_NAME}/versions/${VERSION}"
            fi
          done
          
          echo "status=success" >> $GITHUB_OUTPUT

      - name: Output Cleanup Results
        run: |
          if [ "${{ steps.cleanup.outputs.status }}" == "success" ]; then
            echo "## 🧹 Beta Packages Cleanup" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Successfully removed beta packages for PR #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⚠️ Beta Cleanup Warning" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Some beta packages may not have been removed. Please check manually." >> $GITHUB_STEP_SUMMARY
          fi

  update-version:
    needs: [validate-merge, cleanup-beta]
    if: needs.validate-merge.outputs.is_valid_branch == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.base_ref }}
          fetch-depth: 0
          token: ${{ secrets.personal_access_token }}

      - name: Get current info
        id: version_info
        run: |
          # Get package name from package.json
          FULL_PACKAGE_NAME=$(jq -r .version package.json)
          PACKAGE_NAME=$(basename $FULL_PACKAGE_NAME)
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
      
      - name: Calculate New Version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(jq -r .version package.json)
          TODAY=$(date +'%Y.%m%d')
          
          # If current version starts with today's date, increment counter
          if [[ $CURRENT_VERSION == $TODAY.* ]]; then
            CURRENT_COUNT=$(echo $CURRENT_VERSION | cut -d. -f3)
            NEW_COUNT=$((CURRENT_COUNT + 1))
            NEW_VERSION="$TODAY.$NEW_COUNT"
          else
            # New day, start from 0
            NEW_VERSION="$TODAY.0"
          fi
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: ${{ env.REGISTRY }}
          scope: '@${{ github.repository_owner }}'

      - name: Update Package Version
        run: |
          jq --arg version "${{ steps.version.outputs.new_version }}" \
             '.version = $version' \
             package.json > package.json.tmp
          mv package.json.tmp package.json

      - name: Build and Publish
        id: publish
        run: |
          echo "@${{ github.repository_owner }}:registry=${{ env.REGISTRY }}" > .npmrc
          npm install
          npm install -g gulp-cli
          gulp --prod
          npm publish
          echo "status=success" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.personal_access_token }}

      - name: Commit Version Update and Tagging
        if: steps.publish.outputs.status == 'success'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add package.json
          git commit -m "chore: update version to ${{ steps.version.outputs.new_version }}"
          git push
          git tag -a "${{ steps.version_info.outputs.package_name }}-v${{ steps.version.outputs.new_version }}" -m "Release v${{ steps.version.outputs.new_version }}"
          git push origin "${{ steps.version_info.outputs.package_name }}-v${{ steps.version.outputs.new_version }}"

      - name: Output Version Update Results
        run: |
          if [ "${{ steps.publish.outputs.status }}" == "success" ]; then
            echo "## ✅ Version Update Successful!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Version Details" >> $GITHUB_STEP_SUMMARY
            echo "- Previous Version: \`${{ steps.version.outputs.current_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- New Version: \`${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Package: \`@${{ github.repository_owner }}/${{ needs.validate-merge.outputs.parent_branch }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Installation" >> $GITHUB_STEP_SUMMARY
            echo "Install from the command line:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "$ npm install @${{ github.repository_owner }}/${{ needs.validate-merge.outputs.parent_branch }}@${{ steps.version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Install via package.json:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "\"@${{ github.repository_owner }}/${{ needs.validate-merge.outputs.parent_branch }}\": \"${{ steps.version.outputs.new_version }}\"" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "[Learn more about npm packages](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Version Update Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Error Information" >> $GITHUB_STEP_SUMMARY
            echo "Failed to update package version. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Attempted Update" >> $GITHUB_STEP_SUMMARY
            echo "- Current Version: \`${{ steps.version.outputs.current_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Attempted Version: \`${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Package: \`@${{ github.repository_owner }}/${{ needs.validate-merge.outputs.parent_branch }}\`" >> $GITHUB_STEP_SUMMARY
          fi