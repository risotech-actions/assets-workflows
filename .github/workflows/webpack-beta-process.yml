name: Create Beta Package

on:
  workflow_call:
    inputs:
      node-version:
        description: 'Node.js version'
        default: '18'
        required: false
        type: string
    secrets:
      personal_access_token:
        required: true

env:
  REGISTRY: 'https://npm.pkg.github.com'

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    outputs:
      is_valid_branch: ${{ steps.check.outputs.is_valid_branch }}
      parent_branch: ${{ steps.check.outputs.parent_branch }}
      feature_branch: ${{ steps.check.outputs.feature_branch }}
      skip_message: ${{ steps.check.outputs.skip_message }}
    
    steps:
      - name: Check branch pattern
        id: check
        run: |
          BRANCH="${{ github.head_ref }}"
          TARGET="${{ github.base_ref }}"
          
          if [[ "$BRANCH" =~ ^([^/]+)-features/([^/]+)$ ]]; then
            PARENT="${BASH_REMATCH[1]}"
            FEATURE="${BASH_REMATCH[2]}"
            
            if [ "$TARGET" == "$PARENT" ]; then
              echo "is_valid_branch=true" >> $GITHUB_OUTPUT
              echo "parent_branch=$PARENT" >> $GITHUB_OUTPUT
              echo "feature_branch=$FEATURE" >> $GITHUB_OUTPUT
              echo "skip_message=" >> $GITHUB_OUTPUT
            else
              echo "is_valid_branch=false" >> $GITHUB_OUTPUT
              echo "skip_message=⏭️ Skipped: PR is targeting wrong branch. Expected: $PARENT, Got: $TARGET" >> $GITHUB_OUTPUT
            fi
          else
            echo "is_valid_branch=false" >> $GITHUB_OUTPUT
            echo "skip_message=⏭️ Skipped: Branch does not follow pattern: parent-features/name. Got: $BRANCH" >> $GITHUB_OUTPUT
          fi

      - name: Output Validation Results
        run: |
          if [ "${{ steps.check.outputs.is_valid_branch }}" == "true" ]; then
            echo "## ✅ Branch Validation Passed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Branch Details" >> $GITHUB_STEP_SUMMARY
            echo "- Feature Branch: \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Parent Branch: \`${{ steps.check.outputs.parent_branch }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Feature Name: \`${{ steps.check.outputs.feature_branch }}\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ⏭️ Beta Package Creation Skipped" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Skip Details" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.check.outputs.skip_message }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Branch Information" >> $GITHUB_STEP_SUMMARY
            echo "- Source Branch: \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Target Branch: \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Branching Guidelines" >> $GITHUB_STEP_SUMMARY
            echo "1. Feature branches must:" >> $GITHUB_STEP_SUMMARY
            echo "   - Follow pattern: \`parent-features/name\`" >> $GITHUB_STEP_SUMMARY
            echo "   - Target their parent branch" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "2. Example:" >> $GITHUB_STEP_SUMMARY
            echo "   - Feature branch: \`product-features/new-feature\`" >> $GITHUB_STEP_SUMMARY
            echo "   - Should target: \`product\`" >> $GITHUB_STEP_SUMMARY
          fi

  create-beta:
    needs: validate-branch
    if: needs.validate-branch.outputs.is_valid_branch == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
          token: ${{ secrets.personal_access_token }}

      - name: Get current version and PR info
        id: version_info
        run: |
          # Get package name from package.json
          FULL_PACKAGE_NAME=$(jq -r .version package.json)
          PACKAGE_NAME=$(basename $FULL_PACKAGE_NAME)
          echo "package_name=$PACKAGE_NAME" >> $GITHUB_OUTPUT

          # Get current version from package.json
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          # Get PR number
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
          # Count how many beta versions exist for this PR
          BETA_COUNT=$(git tag -l "v${CURRENT_VERSION}-beta.${PR_NUMBER}.*" | wc -l)
          NEXT_BETA=$((BETA_COUNT + 1))
          echo "beta_number=$NEXT_BETA" >> $GITHUB_OUTPUT
          
          # Construct beta version
          BETA_VERSION="${CURRENT_VERSION}-beta.${PR_NUMBER}.${NEXT_BETA}"
          echo "beta_version=$BETA_VERSION" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          registry-url: ${{ env.REGISTRY }}
          scope: '@${{ github.repository_owner }}'

      - name: Update package version
        run: |
          jq --arg version "${{ steps.version_info.outputs.beta_version }}" \
             '.version = $version' \
             package.json > package.json.tmp
          mv package.json.tmp package.json

      - name: Build and Publish
        id: publish
        run: |
          echo "@${{ github.repository_owner }}:registry=${{ env.REGISTRY }}" > .npmrc
          npm install
          npm run build:prod
          npm publish --tag beta
          echo "status=success" >> $GITHUB_OUTPUT
        env:
          NODE_AUTH_TOKEN: ${{ secrets.personal_access_token }}

      - name: Create git tag
        if: steps.publish.outputs.status == 'success'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "${{ steps.version_info.outputs.package_name }}-v${{ steps.version_info.outputs.beta_version }}" -m "Beta release v${{ steps.version_info.outputs.beta_version }}"
          git push origin "${{ steps.version_info.outputs.package_name }}-v${{ steps.version_info.outputs.beta_version }}"

      - name: Output Beta Creation Results
        run: |
          if [ "${{ steps.publish.outputs.status }}" == "success" ]; then
            echo "## ✅ Beta Package Published Successfully!" >> $GITHUB_STEP_SUMMARY
            echo "Package: @${{ github.repository_owner }}/${{ needs.validate-branch.outputs.parent_branch }}@${{ steps.version_info.outputs.beta_version }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Package Details" >> $GITHUB_STEP_SUMMARY
            echo "- Base Version: \`${{ steps.version_info.outputs.current_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Beta Version: \`${{ steps.version_info.outputs.beta_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- PR Number: \`#${{ steps.version_info.outputs.pr_number }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Beta Number: \`${{ steps.version_info.outputs.beta_number }}\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Installation" >> $GITHUB_STEP_SUMMARY
            echo "Install from the command line:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "$ npm install @${{ github.repository_owner }}/${{ needs.validate-branch.outputs.parent_branch }}@${{ steps.version_info.outputs.beta_version }}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Install via package.json:" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            echo "\"@${{ github.repository_owner }}/${{ needs.validate-branch.outputs.parent_branch }}\": \"${{ steps.version_info.outputs.beta_version }}\"" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "[Learn more about npm packages](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry)" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Beta Package Creation Failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Error Information" >> $GITHUB_STEP_SUMMARY
            echo "Failed to create beta package. Please check the workflow logs for details." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Attempted Package Details" >> $GITHUB_STEP_SUMMARY
            echo "- Base Version: \`${{ steps.version_info.outputs.current_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- Attempted Beta: \`${{ steps.version_info.outputs.beta_version }}\`" >> $GITHUB_STEP_SUMMARY
            echo "- PR Number: \`#${{ steps.version_info.outputs.pr_number }}\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Add PR comment
        if: steps.publish.outputs.status == 'success'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.personal_access_token }}
          script: |
            const betaVersion = '${{ steps.version_info.outputs.beta_version }}';
            const packageName = '@${{ github.repository_owner }}/${{ needs.validate-branch.outputs.parent_branch }}';
            
            const comment = `## 📦 New Beta Package Published!
            
            Install from command line:
            \`\`\`bash
            $ npm install ${packageName}@${betaVersion}
            \`\`\`
            
            Install via package.json:
            \`\`\`json
            "${packageName}": "${betaVersion}"
            \`\`\`
            
            [Learn more about npm packages](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-npm-registry)`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ github.event.pull_request.number }},
              body: comment
            });